---
- hosts: localhost
  become: yes
  vars:
    app: dr
    work_dir: /opt/dr
    rest_dir: dr-rest-service
    git_repo: spring-api
    back_dir: /tmp
    new_dirs: [ cache, bin, tmp, logs ]
    rm_dirs: [ '.git', install, LICENSE, 'README.md' ]
    port: 8090
    portkey: Boot Rest daemon
    PIDFILE: /tmp/boot-pid

  tasks:
    - name: install required java packages in centos 7
      yum:
        name: "{{ packages }}"
      vars:
        packages:
        - java
        - java-devel

    - name: stat foo
      stat: path="{{work_dir}}"
      register: wdir

    - name: backup spring api to backup directory
      archive:
        path: "{{work_dir}}"
        dest: "{{back_dir}}/{{item}}.tgz"
      with_items:
        - "{{app}}"
      when: wdir.stat.exists

    - name: remove work directory for a new working place
      file: path={{work_dir}} state=absent

    - name: create working place
      file: path={{work_dir}} state=directory mode=0755

    - name: clone spring api from github
      git:
        repo: 'https://github.com/joechiu/spring-api.git'
        dest: '{{work_dir}}'

    - name: create required directories for spring api
      file: 
        path: "{{work_dir}}/{{item}}"
        state: directory
        mode: 0777
      with_items:
        - "{{new_dirs}}"

    - name: remove work directory to create a new workin place
      file: path={{work_dir}}/{{rest_dir}}/gradlew mode=0755

    - name: build spring restful application by gradle
      command: chdir={{work_dir}}/{{rest_dir}} ./gradlew build --warning-mode=all

    - name: build the rest service source
      copy:
        src: "{{work_dir}}/{{rest_dir}}/build/libs/dr-rest-service-0.0.1-SNAPSHOT.jar"
        dest: "{{work_dir}}/bin/dr-rest-service.jar"

    - name: create restful daemon
      copy:
        src: "{{work_dir}}/install/bootrestfuld"
        dest: "{{work_dir}}/bin/bootrestfuld"

    - name: change mode to 0755
      file: 
        path: "{{item}}"
        mode: 0755
        owner: root 
        group: root
        recurse: yes
      with_items:
        - "{{work_dir}}/bin"

    - name: get boot restfuld | iptables rules
      shell: iptables -L
      register: iptablesrules
      always_run: yes

    - name: add boot restfuld to iptables rule
      command: /sbin/iptables -I INPUT 1 -p tcp --dport {{port}} -j ACCEPT -m comment --comment "{{portkey}}"
      when: iptablesrules.stdout.find("{{portkey}}") == -1

    - name: save iptables in centos 6
      command: service iptables save
      when: 
        - ansible_distribution == 'CentOS'
        - ansible_distribution_major_version == "6"

    - name: save iptables in centos 7
      firewalld:
        port: 8090/tcp
        permanent: true
        state: enabled
      when: ansible_os_family == "CentOS" and ansible_lsb.major_release|int > 6

    # need iptables-persistent pre-installed
    - name: save iptables
      shell: iptables-save > /etc/iptables/rules.v4
      when: ansible_distribution == 'Ubuntu'

    - name: restart rest daemon
      shell: |
        {{work_dir}}/bin/bootrestfuld stop
        {{work_dir}}/bin/bootrestfuld start
        [ -f {{PIDFILE}} ] && rm {{PIDFILE}}
      args:
        warn: no

    - name: run command if reboot
      lineinfile:
        path: /etc/rc.local
        regexp: '^{{work_dir}}'
        insertafter: '^#(.*)$'
        line: '{{work_dir}}/bin/bootrestfuld start'

#     - name: alternative way to run command for centos when reboot (tested in centos 6 only)
#       lineinfile:
#         path: /etc/inittab
#         regexp: '^{{work_dir}}'
#         insertafter: '^#(.*)$'
#         line: 'bootrest:3:respawn:{{work_dir}}/bin/bootrestfuld start'
#       when: ansible_distribution == 'CentOS'

    - name: fixing mysql error 13 permission issue
      lineinfile:
        path: /etc/apparmor.d/usr.sbin.mysqld
        regexp: '/opt/dr/cache/'
        insertafter: '^(.*)/var/lib/mysql/(.*)rwk(.*)$'
        line: '  /opt/dr/cache/** rwk,'
      when: ansible_distribution == 'Ubuntu'

    - name: reload apparmor
      service:
        name: apparmor
        state: started
      when: ansible_distribution == 'Ubuntu'

    - name: enable mysql network connect
      service:
        name: apparmor
        state: startedo

    - name: Configure SELinux to enable mysql connection
      seboolean: name={{item}} state=true persistent=yes
      with_items:
        - selinuxuser_mysql_connect_enabled
      when: ansible_distribution == 'CentOS'

    - name: cleaning redundant directories checkout from github
      file: 
        path: "{{work_dir}}/{{item}}"
        state: absent
      with_items:
        - "{{rest_dir}}" 
        - "{{rm_dirs}}" 

